{
	"info": {
		"_postman_id": "1e7ac714-fc09-4a37-b357-11778680c7c2",
		"name": "Assignment Submit",
		"description": "**Assignment Submit Module documentation for LMS API.**\n\nStartFragment\n\nAssignment Submit Module :Write scenarios using GET, PUT, POST and DELETE.\n\nEndFragment",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Positive Scenarios",
			"item": [
				{
					"name": "Create Assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "81f8a594-5a92-4c1a-b56e-3cd16c38dfe0",
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"assignmentIdForCreate\",jsonData.assignmentId);\r",
									"pm.test(\"Check if response is JSON\", function () {\r",
									"    for(i=0;i<jsonData.length;i++){\r",
									"        pm.expect(jsonData[i]).to.be.an('object');\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header('content-type');\r",
									"    pm.response.to.be.header('content-type','application/json')\r",
									"});\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"assignmentIdModule\",jsonData.assignmentId);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "83075fb7-2d9d-41ca-9eee-b69cc5ec4bf8",
								"exec": [
									"\r",
									"const assignmentName = pm.variables.get(\"assignmentName\");\r",
									"var snum = \"S\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"\r",
									"pm.globals.set(\"assignmentName_env\", `${assignmentName}-${snum}`);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "add7cac8-7095-427b-89a4-db8f6743377e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n     \"assignmentDescription\": \"Create AssignmentByAccurate\",\r\n\t  \"assignmentId\": 0,\r\n\t  \"assignmentName\": \"Jun23-API-SDET-createAssignment-{{$randomInt}}\",\r\n\t  \"batchId\": 3603,\r\n\t  \"comments\": \"post create assignment\",\r\n\t  \"createdBy\": \"U284\",\r\n\t  \"dueDate\": \"2023-06-19T22:02:28.140+00:00\", \r\n\t  \"graderId\": \"U2118\",\r\n\t  \"pathAttachment1\": \"Filepath-1.json\",\r\n\t  \"pathAttachment2\": \"Filepath-2.json\",\r\n\t  \"pathAttachment3\": \"Filepath-3.json\",\r\n\t  \"pathAttachment4\": \"Filepath-4.json\",\r\n\t  \"pathAttachment5\": \"Filepath-5.json\"\r\n\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/assignments",
						"description": "Post request to create an assignment.\n\nStartFragment\n\n  \n\nMandatory : \n\nAssignment Name , \n\nCreatedBy  - Should be Admin / Staff , Only active users can create assignment\n\nGrader Id  can be Admin / Staff / Student\n\nBatch ID,\n\nDue Date   in Assignments should be entered in YYYY-MM-DD HH:MI:SS\n\nAssignment Description\n\n Assignments created have Due_Date ,this date is associated with assignment submissions.\n\nAssignments are attached as a path in json as pathAttachment1,pathAttachment2, pathAttachment3,pathAttachment4, pathAttachment5\n\n  \n\nAutogenerated : Assignment ID in integer\n\n  \n\nBasUrl : [https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms](https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms)\n\nEndpoint : /assignments\n\n  \n  \n\nRequest Body:\n\n{\n\n  \"assignmentDescription\": \"string\",\n\n  \"assignmentId\": 0,\n\n  \"assignmentName\": \"string\",\n\n  \"batchId\": 0,\n\n  \"comments\": \"string\",\n\n  \"createdBy\": \"string\",\n\n  \"dueDate\": \"2023-06-19T22:02:28.140Z\",\n\n  \"graderId\": \"string\",\n\n  \"pathAttachment1\": \"string\",\n\n  \"pathAttachment2\": \"string\",\n\n  \"pathAttachment3\": \"string\",\n\n  \"pathAttachment4\": \"string\",\n\n  \"pathAttachment5\": \"string\" }\n\n  \n\nResponse Body : \n\n{\n\n  \"assignmentDescription\": \"string\",\n\n  \"assignmentId\": 0,\n\n  \"assignmentName\": \"string\",\n\n  \"batchId\": 0,\n\n  \"comments\": \"string\",\n\n  \"createdBy\": \"string\",\n\n  \"dueDate\": \"2023-06-19T22:18:43.750Z\",\n\n  \"graderId\": \"string\",\n\n  \"pathAttachment1\": \"string\",\n\n  \"pathAttachment2\": \"string\",\n\n  \"pathAttachment3\": \"string\",\n\n  \"pathAttachment4\": \"string\",\n\n  \"pathAttachment5\": \"string\"\n\n}\n\nStatus Code : \n\nSuccess - 201 Created\n\n  \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "get all submission",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "22cab847-5b52-4990-9985-6cdbe07d9aca",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"console.log(jsonData.length);\r",
									"\r",
									"pm.test(\"Check if response is JSON\", function () {\r",
									"    for(i=0;i<jsonData.length;i++){\r",
									"        pm.expect(jsonData[i]).to.be.an('object');\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header('content-type');\r",
									"    pm.response.to.be.header('content-type','application/json')\r",
									"});\r",
									"\r",
									"pm.test(\"properties have valid data type\", function(){\r",
									"    const res = pm.response.json();\r",
									"    for(i=0;i<res.length;i++){\r",
									"        pm.expect(res[i].submissionId).to.be.a('number');\r",
									"        pm.expect(res[i].assignmentId).to.be.a('number');\r",
									"        pm.expect(res[i].subDesc).not.eql('null');\r",
									"        \r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"check userId is alphaNumeric\", function(){\r",
									"    const res = pm.response.json();\r",
									"    for(i=0;i<res.length;i++){       \r",
									"        pm.expect(res[i].userId).to.match(/^([U][0-9]+)$/i);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "69e8c6e3-5264-49e6-822c-3525ddc2a3c3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d822c6c9-5ca5-41a5-8ab0-7c7bf9b873cf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/assignmentsubmission",
						"description": "**API request to get all submission details.**\n\nStartFragment\n\nBaseUrl: [https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms](https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms)\n\nEndpoint: /assignmentsubmission\n\nResponse body: \n\n\\[    {\n\n        \"submissionId\": 0,\n\n        \"assignmentId\": 0,\n\n        \"userId\": \"string\",\n\n        \"subDesc\": \"string\",\n\n        \"subComments\": \"string\",\n\n        \"subPathAttach1\": \"string\",\n\n        \"subPathAttach2\": \"string\",\n\n        \"subPathAttach3\": \"String\",\n\n        \"subPathAttach4\": \"string\",\n\n        \"subPathAttach5\": \"string\",\n\n        \"subDateTime\": \"string\",\n\n        \"gradedBy\": 0,\n\n        \"gradedDateTime\": \"string\",\n\n        \"grade\": 0\n\n    }\\]\n\nStatus Code : 200 Ok\n\n  \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "submit assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05565064-557f-4820-8785-856b89391af0",
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"submissionId\",jsonData.submissionId);\r",
									"pm.collectionVariables.set(\"userId\",jsonData.userId);\r",
									"pm.collectionVariables.set(\"assignmentId\",jsonData.assignmentId);\r",
									"\r",
									"\r",
									"//console.log(jsonData.submissionId);\r",
									"pm.test(\"Check header type is present\", function () {\r",
									"    pm.response.to.have.header('content-type');\r",
									"   \r",
									"});\r",
									"pm.test(\"Check header type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('content-type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Expected response to be an object\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Has property inside object\", function () {\r",
									"    pm.expect(jsonData).to.have.property('submissionId').to.be.an('number');\r",
									"    pm.expect(jsonData).to.have.property('assignmentId').an('number');\r",
									"    pm.expect(jsonData).to.have.property('userId');\r",
									"    pm.expect(jsonData).to.have.property('subComments');\r",
									"});\r",
									"\r",
									"pm.test(\"Graded by is null\", function () {\r",
									"    pm.expect(jsonData.gradedBy).to.be.null;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e2f31eee-661a-41df-a068-332083e28f93",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"assignmentId\": {{assignmentId}},\r\n\"userId\": \"{{userId}}\",\r\n\"subDesc\": \"{{subDesc}}{{$randomInt}}\",\r\n\"subComments\": \"{{subComments}}\",\r\n\"subPathAttach1\": \"{{subPathAttach1}}\",\r\n\"subDateTime\": \"{{subDateTime}}\",\r\n\"gradedBy\": null,\r\n\"gradedDateTime\": null,\r\n\"grade\": -1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/assignmentsubmission",
						"description": "Submit new Assignment using POST request.\n\nStartFragment\n\nNotes: \n\n- When assignment Submission has to be made, make sure the assignment submitted is present and its associated batchID is also present.\n- Submission Date in Assignment Submission should be less than or equal to DUE_Date in Assignment. Then only submission is possible\n- Submission Date in Assignment Submission is of timestamp datatype so the Date should be entered in   MM-dd-yyyy HH:mm:ss\n- An assignment can be resubmitted(PUT operation from Postman) as many times by the same user until the assignment's due date.\n- Grading can happen only after the assignment's due date is passed. Till that time, grading will not accept any values and will show the grade value as ‘-1’ which is a placeholder.  ‘GradedBy’ is a String and can be any user\n    \n\n  \n\nBaseUrl: [https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms](https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms)\n\nEndpoint: /assignmentsubmission\n\nStartFragment\n\n  \n\nRequest Body : \n\n\\[    {        \"assignmentId\": 0,\n\n        \"userId\": \"string\",\n\n        \"subDesc\": \"string\",\n\n        \"subComments\": \"string\",\n\n        \"subPathAttach1\": \"string\",\n\n        \"subPathAttach2\": \"string\",\n\n        \"subPathAttach3\": \"String\",\n\n        \"subPathAttach4\": \"string\",\n\n        \"subPathAttach5\": \"string\",\n\n        \"subDateTime\": \"string\",\n\n        \"gradedBy\": 0,\n\n        \"gradedDateTime\": \"string\",\n\n        \"grade\": 0\n\n    }\\]\n\nMandatory : subDateTime, assignmentID , UserId , Submission description \n\nAutogenerated : submissionID\n\n  \n\nResponse body : \n\n\\[    {   \"submissionId\": 0,\n\n        \"assignmentId\": 0,\n\n        \"userId\": \"string\",\n\n        \"subDesc\": \"string\",\n\n        \"subComments\": \"string\",\n\n        \"subPathAttach1\": \"string\",\n\n        \"subPathAttach2\": \"string\",\n\n        \"subPathAttach3\": \"String\",\n\n        \"subPathAttach4\": \"string\",\n\n        \"subPathAttach5\": \"string\",\n\n        \"subDateTime\": \"string\",\n\n        \"gradedBy\": 0,\n\n        \"gradedDateTime\": \"string\",        \"grade\": 0      }\\]\n\n  \n\nStatus Code : 201 created, 404 not Found with message and boolean success details.\n\n  \n\nEndFragment\n\n  \n  \n\n  \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "grade assignment submission",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559cf98e-c0e3-4af8-88e8-5508ff73322c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"/*\r",
									"const response = pm.response.json();\r",
									"pm.test(\"AssignmentId is not matching \", function () {\r",
									"    var assId = pm.collectionVariables.get('assignmentId');\r",
									"    console.log(\"assignmentId ::\"+assId);\r",
									"    pm.expect(res.assignmentId).to.eql(assId);\r",
									"});*/\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b0bb3509-5f0c-40b4-be4c-4ed5308e8d8c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"assignmentId\": 1661,\r\n        \"userId\": \"U3606\",\r\n        \"subDesc\": \"desription\",\r\n        \"subComments\": \"comments\",\r\n        \"subPathAttach1\": \"bc.dovc\",\t\t\r\n        \"subDateTime\": \"07-01-2023 01:32:50\",\r\n        \"gradedBy\": \"U4353\",\r\n        \"gradedDateTime\": \"06-29-2023 01:32:50\",\r\n\t\t\"grade\" : 1\r\n\t}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/assignmentsubmission/gradesubmission/{{submissionId}}",
						"description": "StartFragment\n\n1. ### Resubmit Assignment\n    \n\n  \n\nBaseUrl: [https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms](https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms)\n\nEndpoint: /assignmentsubmission/{Id}\n\nRequest Body : \n\n\\[    {\n\n        \"assignmentId\": 0,\n\n        \"userId\": \"string\",\n\n        \"subDesc\": \"string\",\n\n        \"subComments\": \"string\",\n\n        \"subPathAttach1\": \"string\",\n\n        \"subPathAttach2\": \"string\",\n\n        \"subPathAttach3\": \"String\",\n\n        \"subPathAttach4\": \"string\",\n\n        \"subPathAttach5\": \"string\",\n\n        \"subDateTime\": \"string\",\n\n        \"gradedBy\": 0,\n\n        \"gradedDateTime\": \"string\",\n\n        \"grade\": 0\n\n    }\\]\n\n  \n\nMandatory : subDateTime, assignmentID , UserId , Submission description \n\nResponse body : \n\n\\[    {   \"submissionId\": 0,\n\n        \"assignmentId\": 0,\n\n        \"userId\": \"string\",\n\n        \"subDesc\": \"string\",\n\n        \"subComments\": \"string\",\n\n        \"subPathAttach1\": \"string\",\n\n        \"subPathAttach2\": \"string\",\n\n        \"subPathAttach3\": \"String\",\n\n        \"subPathAttach4\": \"string\",\n\n        \"subPathAttach5\": \"string\",\n\n        \"subDateTime\": \"string\",\n\n        \"gradedBy\": 0,\n\n        \"gradedDateTime\": \"string\",        \"grade\": 0      }\\]\n\n  \n  \n\nStatus Code : 200 OK, 404 not Found with message and boolean success details.\n\nStartFragment\n\n1. ### Grade Assignment Submission\n    \n\n  \n\nBaseUrl: [https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms](https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms)\n\nEndpoint: /assignmentsubmission/gradesubmission/{submissionId}\n\nRequest Body : \n\n\\[    {\n\n        \"assignmentId\": 0,\n\n        \"userId\": \"string\",\n\n        \"subDesc\": \"string\",\n\n        \"subComments\": \"string\",\n\n        \"subPathAttach1\": \"string\",\n\n        \"subPathAttach2\": \"string\",\n\n        \"subPathAttach3\": \"String\",\n\n        \"subPathAttach4\": \"string\",\n\n        \"subPathAttach5\": \"string\",\n\n        \"subDateTime\": \"string\",\n\n        \"gradedBy\": 0,\n\n        \"gradedDateTime\": \"string\",\n\n        \"grade\": 0\n\n    }\\]\n\n  \n\nMandatory : Graded By ,Grade Value\n\nResponse body : \n\n\\[    {   \"submissionId\": 0,\n\n        \"assignmentId\": 0,\n\n        \"userId\": \"string\",\n\n        \"subDesc\": \"string\",\n\n        \"subComments\": \"string\",\n\n        \"subPathAttach1\": \"string\",\n\n        \"subPathAttach2\": \"string\",\n\n        \"subPathAttach3\": \"String\",\n\n        \"subPathAttach4\": \"string\",\n\n        \"subPathAttach5\": \"string\",\n\n        \"subDateTime\": \"string\",\n\n        \"gradedBy\": 0,\n\n        \"gradedDateTime\": \"string\",        \"grade\": 0      }\n\n\\]\n\nStatus Code : 200 OK, 400 Bad Request with message and boolean success details.\n\n  \n\nEndFragment\n\n  \n  \n\n  \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "resubmit assignment",
					"id": "9707026b-0857-4d1e-a594-dfa4f01482c3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\t{\r\n    \"assignmentId\": 1707,\r\n    \"userId\": \"U3606\",\r\n    \"subDesc\": \"description\",\r\n    \"subComments\": \"comments\",\r\n    \"subPathAttach1\": \"filepath.doc\",\r\n    \"subDateTime\": \"06-29-2023 04:31:03\",\r\n    \"gradedBy\": \"U22\",\r\n    \"gradedDateTime\": \"07-01-2023 04:31:03\",\r\n    \"grade\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/assignmentsubmission/{{submissionId}}",
						"description": "Request for resubmission of assignment."
					},
					"response": []
				},
				{
					"name": "get submission by user_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e7da4ea-ce3c-470f-a6c6-03a6cb28099f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"console.log(jsonData.length);\r",
									"\r",
									"/*pm.test(\"Check length of array\", function () {\r",
									"    jsonData.length;\r",
									"});*/\r",
									"\r",
									"pm.test(\"Check if response is JSON\", function () {\r",
									"    for(i=0;i<jsonData.length;i++){\r",
									"        pm.expect(jsonData[i]).to.be.an('object');\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header('content-type');\r",
									"    pm.response.to.be.header('content-type','application/json')\r",
									"});\r",
									"\r",
									"pm.test(\"properties exist\", function(){\r",
									"    for(i=0;i<jsonData.length;i++){\r",
									"        pm.expect(jsonData[i]).to.have.property('submissionId');\r",
									"        pm.expect(jsonData[i]).to.have.property('assignmentId');\r",
									"        pm.expect(jsonData[i]).to.have.property('userId');\r",
									"        pm.expect(jsonData[i]).to.have.property('subDesc');\r",
									"        pm.expect(jsonData[i]).to.have.property('subDateTime');\r",
									"        \r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"properties have valid data type\", function(){\r",
									"    for(i=0;i<jsonData.length;i++){\r",
									"        pm.expect(jsonData[i].submissionId).to.be.a('number');\r",
									"        pm.expect(jsonData[i].assignmentId).to.be.a('number');\r",
									"        pm.expect(jsonData[i].subDesc).not.eql('null');\r",
									"        \r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9d66f4fc-9587-4032-a9c9-1a095ca3bdda",
								"exec": [
									"/*pm.sendRequest(\"https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/users/users\", function (err, response) {\r",
									"    console.log(response.json());\r",
									"    const data = response.json();\r",
									"    pm.globals.set('userIdtoFetchAssignment',data[0].userId);\r",
									"});*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0e167f40-aabc-48a5-b932-3df87151b607",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/assignmentsubmission/student/:user_id",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"assignmentsubmission",
								"student",
								":user_id"
							],
							"variable": [
								{
									"key": "user_id",
									"value": "{{userId}}"
								}
							]
						},
						"description": "StartFragment\n\nRequest for submission details based on user ID.\n\nBaseUrl: [https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms](https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms)\n\nEndpoint: /assignmentsubmission/student/{userId}\n\nResponse Body:\n\n\\[\n\n```\n{\n    \"submissionId\": 0,\n    \"assignmentId\": 0,\n    \"userId\": \"string\",\n    \"subDesc\": \"string\",\n    \"subComments\": \"string\",\n    \"subPathAttach1\": \"string\",\n    \"subPathAttach2\": \"string\",\n    \"subPathAttach3\": \"String\",\n    \"subPathAttach4\": \"string\",\n    \"subPathAttach5\": \"string\",\n    \"subDateTime\": \"string\",\n    \"gradedBy\": 0,\n    \"gradedDateTime\": \"string\",\n    \"grade\": 0\n}\n\n```\n\n\\]\n\nStatus Code : 200 Ok, 404 not Found with message and boolean success details.\n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "get submission by batch_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c5fa0240-3a9a-4215-bb14-074cbfa9752e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f5cc3ff1-0495-4c75-82c1-792173edadc5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/assignmentsubmission/studentbatch/:batch_id",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"assignmentsubmission",
								"studentbatch",
								":batch_id"
							],
							"variable": [
								{
									"key": "batch_id",
									"value": "3603"
								}
							]
						},
						"description": "StartFragment\n\nRequest for assignment submission details based on batch ID.\n\nBaseUrl: [https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms](https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms)\n\nEndpoint: /assignmentsubmission/studentbatch/{batchId}\n\nResponse Body:\n\n\\[     {\n\n        \"submissionId\": 0,\n\n        \"assignmentId\": 0,\n\n        \"userId\": \"string\",\n\n        \"subDesc\": \"string\",\n\n        \"subComments\": \"string\",\n\n        \"subPathAttach1\": \"string\",\n\n        \"subPathAttach2\": \"string\",\n\n        \"subPathAttach3\": \"String\",\n\n        \"subPathAttach4\": \"string\",\n\n        \"subPathAttach5\": \"string\",\n\n        \"subDateTime\": \"string\",\n\n        \"gradedBy\": 0,\n\n        \"gradedDateTime\": \"string\",\n\n        \"grade\": 0\n\n    } \\]\n\n  \n\nStatus Code : 200 Ok, 404 not Found with message and boolean success details.\n\n  \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "get grades by assignment_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "400aeae1-b91b-4483-b600-81627a68979a",
								"exec": [
									"/*pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});*/\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "59ab7191-cf87-4a30-87a7-91b86b7d532b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/assignmentsubmission/getGrades/:assignment_id",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"assignmentsubmission",
								"getGrades",
								":assignment_id"
							],
							"variable": [
								{
									"key": "assignment_id",
									"value": "{{assignmentId}}"
								}
							]
						},
						"description": "StartFragment\n\nBaseUrl: [https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms](https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms)\n\nEndpoint: /assignmentsubmission/getGrades/{assignmentId}\n\nResponse Body:\n\n\\[    {   \"submissionId\": 0,\n\n        \"assignmentId\": 0,\n\n        \"userId\": \"string\",\n\n        \"subDesc\": \"string\",\n\n        \"subComments\": \"string\",\n\n        \"subPathAttach1\": \"string\",\n\n        \"subPathAttach2\": \"string\",\n\n        \"subPathAttach3\": \"String\",\n\n        \"subPathAttach4\": \"string\",\n\n        \"subPathAttach5\": \"string\",\n\n        \"subDateTime\": \"string\",\n\n        \"gradedBy\": 0,\n\n        \"gradedDateTime\": \"string\",\n\n        \"grade\": 0      } \\]\n\n  \nStatus Code : 200 Ok, 404 not Found with message and boolean success details.\n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "get grades by student_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e66631b1-4b03-4e8b-82e8-3edaf90a42d4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b2dba968-59c6-4519-b623-2bed491f5421",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/assignmentsubmission/getGradesByStudentId/:student_id",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"assignmentsubmission",
								"getGradesByStudentId",
								":student_id"
							],
							"variable": [
								{
									"key": "student_id",
									"value": "U3606"
								}
							]
						},
						"description": "StartFragment\n\n  \n\nBaseUrl: [https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms](https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms)\n\nEndpoint: /assignmentsubmission/getGradesByStudentId/{studentID}\n\nResponse Body:\n\n\\[\n\n    {\n\n        \"submissionId\": 0,\n\n        \"assignmentId\": 0,\n\n        \"userId\": \"string\",\n\n        \"subDesc\": \"string\",\n\n        \"subComments\": \"string\",\n\n        \"subPathAttach1\": \"string\",\n\n        \"subPathAttach2\": \"string\",\n\n        \"subPathAttach3\": \"String\",\n\n        \"subPathAttach4\": \"string\",\n\n        \"subPathAttach5\": \"string\",\n\n        \"subDateTime\": \"string\",\n\n        \"gradedBy\": 0,\n\n        \"gradedDateTime\": \"string\",\n\n        \"grade\": 0\n\n    }\n\n\\]\n\n  \n\nStatus Code : 200 Ok, 404 not Found with message and boolean success details.\n\n  \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "get grades by batch_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01c5ca67-101c-4f14-999b-b02910724f04",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "27c82e1c-7583-4abd-b858-1e7bea1f09f2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/assignmentsubmission/grades/:batch_id",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"assignmentsubmission",
								"grades",
								":batch_id"
							],
							"variable": [
								{
									"key": "batch_id",
									"value": "2910"
								}
							]
						},
						"description": "StartFragment\n\nBaseUrl: [https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms](https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms)\n\nEndpoint: /assignmentsubmission/grades/{batchID}\n\nResponse Body:\n\n\\[     {\n\n        \"submissionId\": 0,\n\n        \"assignmentId\": 0,\n\n        \"userId\": \"string\",\n\n        \"subDesc\": \"string\",\n\n        \"subComments\": \"string\",\n\n        \"subPathAttach1\": \"string\",\n\n        \"subPathAttach2\": \"string\",\n\n        \"subPathAttach3\": \"String\",\n\n        \"subPathAttach4\": \"string\",\n\n        \"subPathAttach5\": \"string\",\n\n        \"subDateTime\": \"string\",\n\n        \"gradedBy\": 0,\n\n        \"gradedDateTime\": \"string\",\n\n        \"grade\": 0\n\n    }\n\n\\]\n\n  \n\nStatus Code : 200 Ok, 404 not Found with message and boolean success details.\n\n  \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "delete valid submission",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "165210f4-289a-483f-9d5b-68a0735e935c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7f425f48-dca2-458b-86df-59c6e061aa99",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/assignmentsubmission/:submission_id",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"assignmentsubmission",
								":submission_id"
							],
							"variable": [
								{
									"key": "submission_id",
									"value": "{{submissionId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check id submission ID is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "165210f4-289a-483f-9d5b-68a0735e935c",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8fb2a209-16ed-4f78-97c8-1ae62ae0d041",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/assignmentsubmission/:submission_id",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"assignmentsubmission",
								":submission_id"
							],
							"variable": [
								{
									"id": "f6173537-ca7c-4cb4-a9f7-59993e56f1d3",
									"key": "submission_id",
									"value": "{{submissionId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "1b918805-d145-43d3-a455-4c3bb3170d8b",
			"description": "**This folder holds positive test scenarios for Assignment Submit Module.**"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "7a9d5a66-a31e-4c4a-b304-726235e39689",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "fa2d72a8-fce3-4968-87a9-dfe4e59a130a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "df45c1ed-d22f-4707-a59c-6dcd65624ffe",
			"key": "user_id",
			"value": "U75"
		},
		{
			"id": "13f4794d-9b74-46fc-ad81-b8fa26348754",
			"key": "submissionId",
			"value": "586",
			"type": "string",
			"disabled": true
		},
		{
			"id": "fac7b47b-04e1-43c9-9501-332a5245b917",
			"key": "submissionId",
			"value": ""
		},
		{
			"id": "277f4e7c-7caf-4701-9654-c5cfd14c62ce",
			"key": "userId",
			"value": ""
		},
		{
			"id": "ae7bb28c-b442-42a0-9f5a-e89360b562ad",
			"key": "assignmentId",
			"value": ""
		},
		{
			"id": "81202e45-75c2-4ab3-ae7d-fda5cca629b4",
			"key": "assignmentIdForCreate",
			"value": ""
		},
		{
			"id": "d8cdb9f2-2f34-4249-a8a7-9877d87c8c16",
			"key": "assignmentIdModule",
			"value": ""
		}
	]
}